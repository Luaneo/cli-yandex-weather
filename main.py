import requests
# pip install python-dotenv
from dotenv import load_dotenv
import os
import shutil


class InvalidCoordinatesError(Exception): pass
class InvalidAPIKeyError(Exception): pass
class NotEnoughDataError(Exception): pass


wind_directions = {
    'nw': '↖ (северо-запад)',
    'n': '↑ (север)',
    'ne': '↗ (северо-восток)',
    'e': '→ (восток)',
    'se': '↘ (юго-восток)',
    's': '↓ (южное)',
    'sw': '↙ (юго-запад)',
    'w': '← (запад)'
}


WEATHER_SYMBOL_WEGO = {
    "Unknown": [
        "    .-.      ",
        "     __)     ",
        "    (        ",
        "     `-’     ",
        "      •      "],
    "clear": [
        "\033[38;5;226m    \\   /    \033[0m",
        "\033[38;5;226m     .-.     \033[0m",
        "\033[38;5;226m  ― (   ) ―  \033[0m",
        "\033[38;5;226m     `-’     \033[0m",
        "\033[38;5;226m    /   \\    \033[0m"],
    "partly-cloudy": [
        "\033[38;5;226m   \\  /\033[0m      ",
        "\033[38;5;226m _ /\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m   \\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "             "],
    "cloudy": [
        "             ",
        "\033[38;5;250m     .--.    \033[0m",
        "\033[38;5;250m  .-(    ).  \033[0m",
        "\033[38;5;250m (___.__)__) \033[0m",
        "             "],
    "overcast": [
        "             ",
        "\033[38;5;240;1m     .--.    \033[0m",
        "\033[38;5;240;1m  .-(    ).  \033[0m",
        "\033[38;5;240;1m (___.__)__) \033[0m",
        "             "],
    "drizzle": [
        "\033[38;5;226m _`/\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "\033[38;5;111m     ‘ ‘ ‘ ‘ \033[0m",
        "\033[38;5;111m    ‘ ‘ ‘ ‘  \033[0m"],
    "heavy-rain": [
        "\033[38;5;226m _`/\"\"\033[38;5;240;1m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;240;1m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;240;1m(___(__) \033[0m",
        "\033[38;5;21;1m   ‚‘‚‘‚‘‚‘  \033[0m",
        "\033[38;5;21;1m   ‚’‚’‚’‚’  \033[0m"],
    "rain": [
        "\033[38;5;226m _`/\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "\033[38;5;255m     *  *  * \033[0m",
        "\033[38;5;255m    *  *  *  \033[0m"],
    "snow-showers": [
        "\033[38;5;226m _`/\"\"\033[38;5;240;1m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;240;1m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;240;1m(___(__) \033[0m",
        "\033[38;5;255;1m    * * * *  \033[0m",
        "\033[38;5;255;1m   * * * *   \033[0m"],
    "LightSleetShowers": [
        "\033[38;5;226m _`/\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "\033[38;5;111m     ‘ \033[38;5;255m*\033[38;5;111m ‘ \033[38;5;255m* \033[0m",
        "\033[38;5;255m    *\033[38;5;111m ‘ \033[38;5;255m*\033[38;5;111m ‘  \033[0m"],
    "thunderstorm": [
        "\033[38;5;226m _`/\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "\033[38;5;228;5m    ⚡\033[38;5;111;25m‘ ‘\033[38;5;228;5m⚡\033[38;5;111;25m‘ ‘ \033[0m",
        "\033[38;5;111m    ‘ ‘ ‘ ‘  \033[0m"],
    "thunderstorm-with-rain": [
        "\033[38;5;240;1m     .-.     \033[0m",
        "\033[38;5;240;1m    (   ).   \033[0m",
        "\033[38;5;240;1m   (___(__)  \033[0m",
        "\033[38;5;21;1m  ‚‘\033[38;5;228;5m⚡\033[38;5;21;25m‘‚\033[38;5;228;5m⚡\033[38;5;21;25m‚‘ \033[0m",
        "\033[38;5;21;1m  ‚’‚’\033[38;5;228;5m⚡\033[38;5;21;25m’‚’  \033[0m"],
    "thunderstorm-with-hail": [
        "\033[38;5;226m _`/\"\"\033[38;5;250m.-.    \033[0m",
        "\033[38;5;226m  ,\\_\033[38;5;250m(   ).  \033[0m",
        "\033[38;5;226m   /\033[38;5;250m(___(__) \033[0m",
        "\033[38;5;255m     *\033[38;5;228;5m⚡\033[38;5;255;25m*\033[38;5;228;5m⚡\033[38;5;255;25m* \033[0m",
        "\033[38;5;255m    *  *  *  \033[0m"],
    "light-rain": [
        "\033[38;5;250m     .-.     \033[0m",
        "\033[38;5;250m    (   ).   \033[0m",
        "\033[38;5;250m   (___(__)  \033[0m",
        "\033[38;5;111m    ‘ ‘ ‘ ‘  \033[0m",
        "\033[38;5;111m   ‘ ‘ ‘ ‘   \033[0m"],
    "heavy-rain": [
        "\033[38;5;240;1m     .-.     \033[0m",
        "\033[38;5;240;1m    (   ).   \033[0m",
        "\033[38;5;240;1m   (___(__)  \033[0m",
        "\033[38;5;21;1m  ‚‘‚‘‚‘‚‘   \033[0m",
        "\033[38;5;21;1m  ‚’‚’‚’‚’   \033[0m"],
    "light-snow": [
        "\033[38;5;250m     .-.     \033[0m",
        "\033[38;5;250m    (   ).   \033[0m",
        "\033[38;5;250m   (___(__)  \033[0m",
        "\033[38;5;255m    *  *  *  \033[0m",
        "\033[38;5;255m   *  *  *   \033[0m"],
    "snow": [
        "\033[38;5;240;1m     .-.     \033[0m",
        "\033[38;5;240;1m    (   ).   \033[0m",
        "\033[38;5;240;1m   (___(__)  \033[0m",
        "\033[38;5;255;1m   * * * *   \033[0m",
        "\033[38;5;255;1m  * * * *    \033[0m"],
    "wet-snow": [
        "\033[38;5;250m     .-.     \033[0m",
        "\033[38;5;250m    (   ).   \033[0m",
        "\033[38;5;250m   (___(__)  \033[0m",
        "\033[38;5;111m    ‘ \033[38;5;255m*\033[38;5;111m ‘ \033[38;5;255m*  \033[0m",
        "\033[38;5;255m   *\033[38;5;111m ‘ \033[38;5;255m*\033[38;5;111m ‘   \033[0m"],
    "Fog": [
        "             ",
        "\033[38;5;251m _ - _ - _ - \033[0m",
        "\033[38;5;251m  _ - _ - _  \033[0m",
        "\033[38;5;251m _ - _ - _ - \033[0m",
        "             "]
}


def display_widget(location, condition, temperature, wind, pressure):
    print('━' * shutil.get_terminal_size().columns)
    print('По данным сервиса Яндекс Погода')
    drawing = WEATHER_SYMBOL_WEGO[condition]
    print(f'Прогноз погоды: {location}')
    print(drawing[0])
    print(drawing[1], condition)
    print(drawing[2], temperature)
    print(drawing[3], wind)
    print(drawing[4], pressure)
    print('━' * shutil.get_terminal_size().columns)


def main():
    try:
        load_dotenv()

        url = 'https://api.weather.yandex.ru/v2/forecast'

        params = {
            "lat": int(input("Укажите широту: ")),
            "lon": int(input("Укажите долготу: ")),
        }
        if params['lat'] > 90 or params['lat'] < -90 or params['lon'] > 180 or params['lon'] < -180:
            raise InvalidCoordinatesError()

        headers = {
            'X-Yandex-API-Key': os.environ["API_KEY"],
        }

        response = requests.get(url=url, params=params, headers=headers)

        if response.json().get('message', None) == 'forbidden':
            raise InvalidAPIKeyError()
        response.raise_for_status()

        data = response.json()

        try:
            display_widget(
                location=f"{data['geo_object']['province']['name']}, {data['geo_object']['country']['name']}",
                condition=data['fact']['condition'],
                temperature=f"{data['fact']['temp']} ({data['fact']['feels_like']}) °C",
                wind=f'{wind_directions[data["fact"]["wind_dir"]]} {data["fact"]["wind_speed"]}',
                pressure=f"{data['fact']['pressure_mm']} мм рт.ст."
            )
        except KeyError:
            raise NotEnoughDataError()

    except InvalidCoordinatesError:
        print('Заданы неправильные входные данные (геоточка)')

    except requests.exceptions.ConnectionError:
        print('Ошибка соединения. Проверьте ваше подключение к сети')

    except requests.exceptions.HTTPError:
        print('HTTP-код отличен от 200')

    except InvalidAPIKeyError:
        print('Недействительный ключ API')

    except NotEnoughDataError:
        print('В ответе сервера не хватает нужных для работы данных')


if __name__ == '__main__':
    main()
